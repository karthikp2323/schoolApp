continue
records_array.rows[0][0]
records_array.rows[0]
records_array.rows[]
@eventObj.acceptedCount
continue
EventStatus.select(:parent_id_declined).where("event_id =?", params[:eventId] ).count
EventStatus.select(:parent_id_declined, :parent_id).where("event_id =?", params[:eventId] ).count
e.message
next
continue
@invitedUserList
next
@invitedUserList
next
params[:classroom_id]
next
continue
next
continue
next
continue
e.message
next
continue
e.message
next
sql
next
sql
continue
e.message
next
sql
next
continue
next
continue
next
continue
next
continue
e.message
next
e.exception
e.message
next
continue
           ON p.id = s.parent_id
           JOIN parents p
           ON s.id = c.student_id
           JOIN students s
           FROM class_registrations c
"SELECT  COUNT(DISTINCT p.id)
           ON p.id = s.parent_id
           JOIN parents p
           ON s.id = c.student_id
           JOIN students s
           FROM class_registrations c
"SELECT  COUNT(DISTINCT p.id)
           ON p.id = s.parent_id
           JOIN parents p
           ON s.id = c.student_id
           JOIN students s
           FROM class_registrations c
           WHERE c.classroom_id= "+ @event.classroom_id"SELECT  COUNT(DISTINCT p.id)
           ON p.id = s.parent_id
           JOIN parents p
           ON s.id = c.student_id
           JOIN students s
           FROM class_registrations c
"SELECT  COUNT(DISTINCT p.id)
@eventObj.classroom_id
@event.classroom_id
next
@eventObj.classroom_id
next
@event
next
continue
ClassRegistration.joins(student: :parent.select(:id)).where("classroom_id =?", 2 )
ClassRegistration.select(:parent_id).joins(student: :parent).where("classroom_id =?", 2 )
ClassRegistration.joins(student: :parent).where("classroom_id =?", 2 )
lassRegistration.joins(student: :parent).where("classroom_id =?", 2 )
continue
records_array.rows[0][0]
records_array.rows[0]
records_array.rows[0].1
records_array.rows[0].0
records_array.rows[0]
records_array.rows[]
records_array.rows
continue
records_array.to_hash
records_array.columns
records_array.rows
continue
records_array.rows
records_array.row
records_array
continue
records_array
continue
ActiveRecord::Base.connection.execute(sql)
@records_array
continue
Parent.joins(:event_status)
ClassRegistration.joins(student: :parent).where("classroom_id =?", @event.classroom_id )
continue
@accptedUserList
next
